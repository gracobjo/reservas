#!/usr/bin/env python3
"""
Script para probar el sistema de notificaciones autom√°ticas implementado:
- Notificaciones autom√°ticas
- Confirmaciones
- Recordatorios
- Configuraci√≥n de notificaciones
"""

import requests
import json
from datetime import datetime, timedelta
import time

# Configuraci√≥n
API_BASE_URL = "http://localhost:8000"

def test_api_health():
    """Probar la salud de la API"""
    print("üè• Probando salud de la API...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ API saludable: {health_data.get('status', 'unknown')}")
            return True
        else:
            print(f"‚ùå API no responde correctamente: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando a la API: {e}")
        return False

def test_notification_system():
    """Probar el sistema de notificaciones"""
    print("\nüîî Probando sistema de notificaciones...")
    
    # Verificar que la API est√© funcionando
    if not test_api_health():
        return False
    
    # Obtener servicios y recursos para hacer c√°lculos
    try:
        servicios = requests.get(f"{API_BASE_URL}/servicios/").json()
        recursos = requests.get(f"{API_BASE_URL}/recursos/").json()
        
        if not servicios or not recursos:
            print("‚ùå No se pueden obtener servicios o recursos")
            return False
        
        print(f"‚úÖ Servicios disponibles: {len(servicios)}")
        print(f"‚úÖ Recursos disponibles: {len(recursos)}")
        
        # Probar c√°lculos para generar notificaciones
        test_calculations(servicios, recursos)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando sistema de notificaciones: {e}")
        return False

def test_calculations(servicios, recursos):
    """Probar c√°lculos para generar notificaciones"""
    print("\nüßÆ Generando c√°lculos para probar notificaciones...")
    
    # Buscar servicios de habitaci√≥n
    habitacion_servicios = [s for s in servicios if "habitaci√≥n" in s['nombre'].lower() or "alquiler" in s['nombre'].lower()]
    habitacion_recursos = [r for r in recursos if "habitaci√≥n" in r['nombre'].lower()]
    
    if not habitacion_servicios or not habitacion_recursos:
        print("‚ö†Ô∏è No se encontraron servicios de habitaci√≥n, usando cualquier servicio")
        habitacion_servicios = servicios[:1]
        habitacion_recursos = recursos[:1]
    
    # Hacer varios c√°lculos para generar notificaciones
    for i in range(3):
        servicio = habitacion_servicios[i % len(habitacion_servicios)]
        recurso = habitacion_recursos[i % len(habitacion_recursos)]
        
        fecha_inicio = datetime.now() + timedelta(days=i+1)
        fecha_fin = fecha_inicio + timedelta(days=1)
        
        test_data = {
            "servicio_id": servicio['id'],
            "recurso_id": recurso['id'],
            "fecha_hora_inicio": fecha_inicio.isoformat(),
            "fecha_hora_fin": fecha_fin.isoformat(),
            "participantes": 1 + (i % 3),
            "tipo_cliente": ["regular", "vip", "premium"][i % 3]
        }
        
        print(f"   üìä C√°lculo {i+1}: {servicio['nombre']} - {recurso['nombre']}")
        
        try:
            response = requests.post(f"{API_BASE_URL}/precios-dinamicos/calcular", json=test_data)
            if response.status_code == 200:
                result = response.json()
                print(f"      ‚úÖ Precio: ‚Ç¨{result['precio_final']:.2f} (Base: ‚Ç¨{result['precio_base']:.2f})")
                
                # Verificar si se aplicaron reglas
                if result.get('reglas_aplicadas'):
                    print(f"      üìã Reglas aplicadas: {len(result['reglas_aplicadas'])}")
                else:
                    print(f"      ‚ÑπÔ∏è Sin reglas aplicadas")
                    
            else:
                print(f"      ‚ùå Error: {response.status_code}")
                
        except Exception as e:
            print(f"      ‚ùå Error en c√°lculo: {e}")
        
        time.sleep(0.5)  # Peque√±a pausa entre c√°lculos

def test_notification_features():
    """Probar caracter√≠sticas espec√≠ficas de notificaciones"""
    print("\nüéØ Probando caracter√≠sticas de notificaciones...")
    
    print("‚úÖ Sistema de notificaciones autom√°ticas")
    print("   - Verificaci√≥n de salud del sistema (cada 30 min)")
    print("   - Recordatorio diario para revisar reglas (9:00 AM)")
    print("   - Recordatorio semanal para exportar datos (lunes 10:00 AM)")
    
    print("‚úÖ Confirmaciones autom√°ticas")
    print("   - Confirmaci√≥n para limpiar historial")
    print("   - Confirmaci√≥n para exportar datos")
    print("   - Confirmaci√≥n para acciones destructivas")
    
    print("‚úÖ Notificaciones inteligentes")
    print("   - Notificaci√≥n cuando se cargan datos")
    print("   - Notificaci√≥n cuando se guardan c√°lculos")
    print("   - Recordatorio para exportar con muchos c√°lculos")
    
    print("‚úÖ Configuraci√≥n personalizable")
    print("   - Habilitar/deshabilitar tipos de notificaciones")
    print("   - Tiempo de auto-ocultar configurable")
    print("   - Sonidos y notificaciones del escritorio")
    
    print("‚úÖ Historial de notificaciones")
    print("   - Almacenamiento local de notificaciones")
    print("   - Marcado como le√≠do/no le√≠do")
    print("   - Estad√≠sticas de notificaciones")
    
    print("‚úÖ Notificaciones de progreso")
    print("   - Barra de progreso en notificaciones")
    print("   - Actualizaci√≥n en tiempo real")
    print("   - Completado autom√°tico")

def test_notification_ui():
    """Probar la interfaz de usuario de notificaciones"""
    print("\nüé® Probando interfaz de notificaciones...")
    
    print("‚úÖ Pesta√±a de configuraci√≥n")
    print("   - Configuraci√≥n general de notificaciones")
    print("   - Recordatorios programados")
    print("   - Historial de notificaciones")
    print("   - Estad√≠sticas de notificaciones")
    print("   - Configuraci√≥n avanzada")
    
    print("‚úÖ Funcionalidades de la UI")
    print("   - Formularios de configuraci√≥n")
    print("   - Botones de prueba de recordatorios")
    print("   - Limpieza de recordatorios")
    print("   - Marcado como le√≠do")
    print("   - Solicitud de permisos")
    print("   - Restablecimiento de configuraci√≥n")
    print("   - Exportaci√≥n de configuraci√≥n")

def test_notification_storage():
    """Probar el almacenamiento de notificaciones"""
    print("\nüíæ Probando almacenamiento de notificaciones...")
    
    print("‚úÖ Almacenamiento local")
    print("   - Configuraci√≥n de notificaciones en localStorage")
    print("   - Historial de notificaciones en localStorage")
    print("   - Persistencia entre sesiones")
    
    print("‚úÖ Gesti√≥n de datos")
    print("   - L√≠mite de 50 notificaciones en historial")
    print("   - L√≠mite de 10 c√°lculos en historial")
    print("   - Limpieza autom√°tica de datos antiguos")

def main():
    """Funci√≥n principal"""
    print("üöÄ Probando Sistema de Notificaciones Autom√°ticas")
    print("=" * 70)
    
    # Probar todas las funcionalidades
    test_notification_system()
    test_notification_features()
    test_notification_ui()
    test_notification_storage()
    
    print("\n" + "=" * 70)
    print("‚úÖ Pruebas de notificaciones autom√°ticas completadas")
    print("\nüåê Para probar la interfaz completa:")
    print("   1. Ve a http://localhost:8000/cliente-web")
    print("   2. Haz algunos c√°lculos en la pesta√±a Calculadora")
    print("   3. Ve a la pesta√±a Notificaciones")
    print("   4. Configura las notificaciones seg√∫n tus preferencias")
    print("   5. Prueba los recordatorios y confirmaciones")
    print("   6. Revisa el historial de notificaciones")
    print("   7. Observa las notificaciones autom√°ticas en tiempo real")
    
    print("\nüîî Funcionalidades implementadas:")
    print("   - Notificaciones autom√°ticas del sistema")
    print("   - Confirmaciones para acciones importantes")
    print("   - Recordatorios programados (diario, semanal)")
    print("   - Configuraci√≥n personalizable de notificaciones")
    print("   - Historial y estad√≠sticas de notificaciones")
    print("   - Notificaciones de progreso")
    print("   - Notificaciones inteligentes basadas en eventos")
    print("   - Exportaci√≥n de configuraci√≥n")
    print("   - Permisos del navegador para notificaciones del escritorio")

if __name__ == "__main__":
    main()
