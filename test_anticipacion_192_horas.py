#!/usr/bin/env python3
"""
Test espec√≠fico para el c√°lculo de 192 horas (8 d√≠as) 
que no est√° mostrando descuentos de anticipaci√≥n en el frontend
"""

import requests
import json
from datetime import datetime, timedelta

# Configuraci√≥n
API_BASE_URL = "http://localhost:8000"

def test_calculo_192_horas():
    """Test espec√≠fico para 192 horas (8 d√≠as)"""
    
    print("üîç Test espec√≠fico para 192 horas (8 d√≠as)")
    print("=" * 50)
    
    # Calcular fechas para 192 horas (8 d√≠as)
    fecha_inicio = datetime.now() + timedelta(days=1)
    fecha_fin = fecha_inicio + timedelta(hours=192)
    
    # Datos del test (simulando el frontend)
    payload = {
        "servicio_id": 12,  # Alquiler Habitaci√≥n Individual
        "recurso_id": 15,   # Habitaci√≥n Individual 1
        "fecha_hora_inicio": fecha_inicio.isoformat(),
        "fecha_hora_fin": fecha_fin.isoformat(),
        "participantes": 1,
        "tipo_cliente": "regular"
    }
    
    print(f"üì§ Enviando payload:")
    print(f"   - Servicio ID: {payload['servicio_id']}")
    print(f"   - Recurso ID: {payload['recurso_id']}")
    print(f"   - Fecha inicio: {payload['fecha_hora_inicio']}")
    print(f"   - Fecha fin: {payload['fecha_hora_fin']}")
    print(f"   - Duraci√≥n: 192 horas (8 d√≠as)")
    print(f"   - Participantes: {payload['participantes']}")
    print(f"   - Tipo cliente: {payload['tipo_cliente']}")
    print()
    
    try:
        # Llamar a la API
        response = requests.post(
            f"{API_BASE_URL}/precios-dinamicos/calcular",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üì• Respuesta de la API:")
        print(f"   - Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"   - Precio base: {result.get('precio_base', 'N/A')}‚Ç¨")
            print(f"   - Precio final: {result.get('precio_final', 'N/A')}‚Ç¨")
            print(f"   - Diferencia: {result.get('precio_final', 0) - result.get('precio_base', 0):.2f}‚Ç¨")
            
            # Analizar reglas aplicadas
            reglas_aplicadas = result.get('reglas_aplicadas', [])
            print(f"   - Total reglas aplicadas: {len(reglas_aplicadas)}")
            
            if reglas_aplicadas:
                print("\nüîç Reglas aplicadas:")
                for i, regla in enumerate(reglas_aplicadas, 1):
                    print(f"   {i}. {regla.get('nombre', 'Sin nombre')}")
                    print(f"      - Tipo: {regla.get('tipo_regla', 'N/A')}")
                    print(f"      - Modificador: {regla.get('tipo_modificador', 'N/A')}")
                    print(f"      - Valor: {regla.get('valor_modificador', 'N/A')}")
                    print(f"      - Descuento: {regla.get('descuento', 0):.2f}‚Ç¨")
                    print(f"      - Recargo: {regla.get('recargo', 0):.2f}‚Ç¨")
                    print()
                
                # Verificar espec√≠ficamente descuentos de anticipaci√≥n
                reglas_anticipacion = [r for r in reglas_aplicadas if r.get('tipo_regla') == 'anticipacion']
                if reglas_anticipacion:
                    print("‚úÖ ¬°DESCUENTOS DE ANTICIPACI√ìN ENCONTRADOS!")
                    for regla in reglas_anticipacion:
                        print(f"   - {regla.get('nombre')}: {regla.get('descuento', 0):.2f}‚Ç¨")
                else:
                    print("‚ùå NO se encontraron descuentos de anticipaci√≥n")
                    
                # Verificar reglas de hora pico
                reglas_hora_pico = [r for r in reglas_aplicadas if r.get('tipo_regla') == 'hora']
                if reglas_hora_pico:
                    print("‚úÖ ¬°REGLAS DE HORA PICO ENCONTRADAS!")
                    for regla in reglas_hora_pico:
                        print(f"   - {regla.get('nombre')}: {regla.get('recargo', 0):.2f}‚Ç¨")
            else:
                print("‚ùå No se aplicaron reglas")
                
        else:
            print(f"‚ùå Error en la API: {response.status_code}")
            print(f"   - Respuesta: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error en el test: {e}")

def verificar_reglas_anticipacion():
    """Verificar que las reglas de anticipaci√≥n existen y est√°n activas"""
    
    print("\nüîç Verificando reglas de anticipaci√≥n en la base de datos")
    print("=" * 50)
    
    try:
        # Obtener todas las reglas
        response = requests.get(f"{API_BASE_URL}/precios-dinamicos/reglas")
        
        if response.status_code == 200:
            reglas = response.json()
            
            # Filtrar reglas de anticipaci√≥n
            reglas_anticipacion = [r for r in reglas if r.get('tipo_regla') == 'anticipacion']
            
            if reglas_anticipacion:
                print(f"‚úÖ Se encontraron {len(reglas_anticipacion)} reglas de anticipaci√≥n:")
                for regla in reglas_anticipacion:
                    print(f"   - {regla.get('nombre')}")
                    print(f"     * Activa: {regla.get('activa', False)}")
                    print(f"     * Tipo: {regla.get('tipo_regla')}")
                    print(f"     * Modificador: {regla.get('tipo_modificador')}")
                    print(f"     * Valor: {regla.get('valor_modificador')}")
                    print(f"     * Prioridad: {regla.get('prioridad')}")
                    print()
            else:
                print("‚ùå No se encontraron reglas de anticipaci√≥n")
                
            # Mostrar todas las reglas para debug
            print("üìã Todas las reglas disponibles:")
            for regla in reglas:
                print(f"   - {regla.get('nombre')} ({regla.get('tipo_regla')}) - Activa: {regla.get('activa')}")
                
        else:
            print(f"‚ùå Error obteniendo reglas: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error verificando reglas: {e}")

if __name__ == "__main__":
    print("üöÄ Iniciando test de descuento por anticipaci√≥n para 192 horas")
    print()
    
    # Verificar reglas primero
    verificar_reglas_anticipacion()
    
    # Test espec√≠fico
    test_calculo_192_horas()
    
    print("\n‚úÖ Test completado")
