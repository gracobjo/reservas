#!/usr/bin/env python3
"""
Script para debuggear exactamente qu√© est√° enviando el frontend
y qu√© est√° recibiendo, para identificar por qu√© no se aplica el descuento
"""

import requests
import json
from datetime import datetime, timedelta

# Configuraci√≥n
API_BASE_URL = "http://localhost:8000"

def test_health():
    """Verificar que la API est√© funcionando"""
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API funcionando correctamente")
            return True
        else:
            print(f"‚ùå API respondiendo con status {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå No se puede conectar a la API: {e}")
        return False

def debug_frontend_request():
    """
    Simula exactamente lo que hace el frontend cuando el usuario:
    1. Selecciona una fecha futura (7+ d√≠as)
    2. Selecciona una hora
    3. Selecciona duraci√≥n en noches
    4. Hace clic en calcular
    """
    print("üîç Debuggeando Request del Frontend")
    print("=" * 50)
    
    # Simular selecci√≥n del usuario en el frontend
    fecha_seleccionada = "2025-08-27"  # 7 d√≠as en el futuro
    hora_seleccionada = "10:00"
    duracion_noches = 1
    participantes = 1
    tipo_cliente = "regular"
    
    print(f"üìÖ Fecha seleccionada por el usuario: {fecha_seleccionada}")
    print(f"üïê Hora seleccionada por el usuario: {hora_seleccionada}")
    print(f"üåô Duraci√≥n seleccionada: {duracion_noches} noche(s)")
    print(f"üë• Participantes: {participantes}")
    print(f"üë§ Tipo cliente: {tipo_cliente}")
    
    # Simular el c√°lculo del frontend (l√≠nea 425-430 de app.js)
    fecha_hora_inicio = datetime.strptime(f"{fecha_seleccionada}T{hora_seleccionada}", "%Y-%m-%dT%H:%M")
    duracion_horas = duracion_noches * 24  # L√≠nea 430 de app.js
    fecha_hora_fin = fecha_hora_inicio + timedelta(hours=duracion_horas)
    
    print(f"\nüîß C√°lculo del frontend:")
    print(f"   fecha_hora_inicio = new Date('{fecha_seleccionada}T{hora_seleccionada}')")
    print(f"   duracion_horas = {duracion_noches} * 24 = {duracion_horas}")
    print(f"   fecha_hora_fin = fecha_hora_inicio + ({duracion_horas} * 60 * 60 * 1000)")
    print(f"   Resultado: {fecha_hora_inicio} -> {fecha_hora_fin}")
    
    # Calcular d√≠as de anticipaci√≥n
    hoy = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    dias_anticipacion = (fecha_hora_inicio.date() - hoy.date()).days
    
    print(f"\nüìä An√°lisis de anticipaci√≥n:")
    print(f"   Fecha de hoy: {hoy.date()}")
    print(f"   Fecha de reserva: {fecha_hora_inicio.date()}")
    print(f"   D√≠as de anticipaci√≥n: {dias_anticipacion}")
    print(f"   ¬øDeber√≠a aplicar descuento? {'S√ç' if dias_anticipacion >= 7 else 'NO'}")
    
    # Simular el payload que env√≠a el frontend (l√≠nea 432-438 de app.js)
    payload = {
        "servicio_id": 1,  # Consulta M√©dica
        "recurso_id": 1,   # Consultorio 1
        "fecha_hora_inicio": fecha_hora_inicio.isoformat(),
        "fecha_hora_fin": fecha_hora_fin.isoformat(),
        "participantes": participantes,
        "tipo_cliente": tipo_cliente
    }
    
    print(f"\nüì§ Payload que env√≠a el frontend:")
    print(json.dumps(payload, indent=2))
    
    # Enviar a la API
    print(f"\nüöÄ Enviando a la API...")
    url = f"{API_BASE_URL}/precios-dinamicos/calcular"
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        result = response.json()
        
        print(f"‚úÖ Respuesta de la API:")
        print(f"   Status: {response.status_code}")
        print(f"   Precio base: {result.get('precio_base')}‚Ç¨")
        print(f"   Precio final: {result.get('precio_final')}‚Ç¨")
        print(f"   Descuento total: {result.get('descuento_total')}‚Ç¨")
        print(f"   Reglas aplicadas: {len(result.get('reglas_aplicadas', []))}")
        
        for regla in result.get('reglas_aplicadas', []):
            print(f"      - {regla.get('nombre')}: {regla.get('tipo_modificador')} {regla.get('valor_modificador')}")
        
        # Verificar si se aplic√≥ el descuento por anticipaci√≥n
        if dias_anticipacion >= 7:
            if result.get('descuento_total', 0) > 0:
                print(f"\n‚úÖ RESULTADO: Descuento por anticipaci√≥n S√ç se aplic√≥")
                print(f"   El backend est√° funcionando correctamente")
                print(f"   El problema debe estar en el frontend")
            else:
                print(f"\n‚ùå RESULTADO: Descuento por anticipaci√≥n NO se aplic√≥")
                print(f"   El problema est√° en el backend")
        else:
            print(f"\n‚ÑπÔ∏è RESULTADO: Sin descuento por anticipaci√≥n (esperado)")
        
        return result
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Error HTTP: {e.response.status_code}")
        print(f"   Respuesta: {e.response.text}")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def main():
    print("üöÄ Debug Frontend - Descuento por Anticipaci√≥n")
    print("=" * 60)
    
    if not test_health():
        return
    
    debug_frontend_request()

if __name__ == "__main__":
    main()
